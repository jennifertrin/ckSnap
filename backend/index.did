service: () -> {
    createProposal: (text, int8, text, text, int8, record {token_amount:int8; to_address:text; from_address:text}) -> (record {id:int8; title:text; description:text; deadline:int8; execution:record {token_amount:int8; to_address:text; from_address:text}; block:text; contract_address:text; amount:int8});
    ethGetCurrentBlock: () -> (text);
    ethGetTokenBalance: (text, text, text) -> (text);
    ethTransform: (record {context:vec nat8; response:record {status:nat; body:vec nat8; headers:vec record {value:text; name:text}}}) -> (record {status:nat; body:vec nat8; headers:vec record {value:text; name:text}}) query;
    getAllProposals: () -> (vec record {id:int8; title:text; description:text; deadline:int8; execution:record {token_amount:int8; to_address:text; from_address:text}; block:text; contract_address:text; amount:int8}) query;
    getProposal: (int8) -> (opt record {id:int8; title:text; description:text; deadline:int8; execution:record {token_amount:int8; to_address:text; from_address:text}; block:text; contract_address:text; amount:int8}) query;
    getVoteById: (int8) -> (opt record {signature:text; decision:variant {No:bool; Yes:bool; Abstain:bool}; voteId:int8; address:text; proposalId:int8}) query;
    getVoteByProposalId: (int8) -> (vec record {signature:text; decision:variant {No:bool; Yes:bool; Abstain:bool}; voteId:int8; address:text; proposalId:int8}) query;
    publicKey: () -> (record {publicKey:vec nat8});
    sign: (vec nat8) -> (record {signature:vec nat8});
    voteOnProposal: (int8, variant {No:bool; Yes:bool; Abstain:bool}, text, text) -> (record {signature:text; decision:variant {No:bool; Yes:bool; Abstain:bool}; voteId:int8; address:text; proposalId:int8});
}
